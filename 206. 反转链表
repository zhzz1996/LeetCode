# 题目描述
题目地址：https://leetcode-cn.com/problems/reverse-linked-list
给你单链表的头节点 head ，请你反转链表，并返回反转后的链表。
 

示例 1：


> 输入：head = [1,2,3,4,5] 
> 输出：[5,4,3,2,1]

示例 2：


> 输入：head = [1,2] 
> 输出：[2,1]

示例 3：

> 输入：head = [] 
> 输出：[]

 

提示：

链表中节点的数目范围是 [0, 5000]
-5000 <= Node.val <= 5000

# 解法（JAVA）

```java
/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode() {}
 *     ListNode(int val) { this.val = val; }
 *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }
 * }
 */
 //双指针算法
class Solution {
    public ListNode reverseList(ListNode head) {
        ListNode cur = head; //cur指向头指针
        ListNode pre = null; //pre代表反转后cur的next指针
        ListNode temp = null; //temp用于保存目前cur的next指针
        while(cur != null)
        {
            temp = cur.next;
            cur.next = pre;
            pre = cur;
            cur = temp;
        }
        return pre;
    }
}
//递归算法
class Solution {
    public ListNode reverseList(ListNode head) {
      return reverse(head,null);
    }
    private ListNode reverse(ListNode cur,ListNode pre){
        if(cur == null)
        {
            return pre;
        }
        ListNode temp = null;
        temp = cur.next;
        cur.next = pre;
        pre = cur;
        cur = temp;
        return reverse(cur,pre); //递归执行下一步
        }
}
```
# Github分享
https://github.com/zhzz1996
